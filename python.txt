<< 언어에 따른 개발 환경 >>

    JAVASCRIPT
        실행환경 : 브라우저 or NodeJs
        리액트 : node 덕에 가능 한것 (yarn add 이런거)

    JAVA
        => JDK 설치 (java developement kit) : 자바 개발 도구
            => 자바 실행 환경

    PYTHON
        => python.exe 설치
            => 파이썬 실행 환경
        - 가상환경 꾸며가면서 작업
            => 원본 환경은 놔두고 복제해서 가상환경을 만듬
                => 가상환경에 프로그램을 설치 => 개발이 끝나면 라이브러리 및 가상환경을 날려버림
                        => why ? : 라이브러리가 너무 많음
            => 그렇다면 원본은 ? : 시스템 환경변수 사용자 확인해보면 원본 경로 나옴

    자바와 파이썬의 차이
        자바 : 컴파일러
            => 도구라고 불림
        파이썬 : 인터 프린터 (자바스크립트와 실행방법 비슷함)
            => 인터프린터 :  100 줄 중에 13번째 줄에 오류 발생 => 13번째 이후 줄은 실행이 안되어 버림
                => 이래서 "번역/통역"이라고도 부름


    파이썬 가상환경 만들기
        1. 폴더 생성
        2. cmd 관리자 권한으로 실행 후 만든 폴더로 이동
        3. python -m venv venv 코드 실행 (vertual env)
            => 원본환경에서 현재폴더로 환경 복사 한 것
            복사 환경에서 lib : 라이브러리 그 안에 pip 하나 있긴 함
        4. 이후 cd venv\Scripts 코드 실행 후 이동
        5. activate 로 가상환경 활성화
            => 원본환경을 안쓰기 위해서 해당 주소에서 실행해야 함 : 가상환경이 활성화됨

<< Python >>

    => list 와 dictionary 형태의 코드를 많이 사용함

    - 실행
        ctrl + enter : 현재 셀 실행
        shift + enter : 현재 셀 실행 + 다음 행 추가
    
    * 주석 : #
      여러줄 주석 : """  """ => 사이에 여러줄 주석을 넣을 수 있음

    < 특징 >
        1) 작성시 마지막에 세미콜론(;) 사용 X
        2) {} 이 없음 (묶을 수 없음)
            => 탭으로 처리
        3) 리턴이 () : 튜플을 의미
        4) 리턴이 [] : 리스트

    < jupyter (주피터) >

        - 기초 사용법
            + Code
                => 코드 사용

            + Markdown

                - 문법
                    참고 : https://gist.github.com/ihoneymon/652be052a0727ad59601
                    # => H1
                    ## => H2
                    ### => H3
                    #### => H4
                    ##### => H5
                    ###### => H6

            - java 랑 다른점

                java : python
                    1. true / False : True / False
                    2. String : str
                    3. boolean : bool

            - 옵션
                print() 관련
                    참고 : basic/print
                    1) sep : 문자 사이에 연결 문자열 지정(default : 공백)
                        => print default 값 : 공백
                    2) end : print() 실행 후 줄바꿈 여부
                        => print default 값 : enter

    < 변수 > 
        
        - 변수 선언
            1) 타입 선언 언어 : java (int a = 3)
            2) 타입 선언하지 않는 언어
                1. 자바스크립트 (let a = 3)
                    => let 은 타입 X
                2. python
    
    < 자료형 >
        참고 : basic/datatype
        
        * int + str : TypeError: unsupported operand type
            js/java : "12" + 10 => 1210 (연결해 줌)
            python : 오류 남

        - 숫자형
            1) 정수
            2) 실수
            3) 8진수
                => 0o
            4) 16진수
                => 0x

            - 사칙연산
                => 대부분 java 와 같음
                +
                -
                *
                / : 자바 = 몫만 나옴
                    => js, 파이썬 : 소수점까지 다 연산
                // : js, 파이썬의 몫만 구하는 연산자
                %
        
        - 문자열 자료형
            1) 큰따옴표
                => 하나짜리는 줄바꿈이 안됨
            2) 작은따옴표
                => '' 안에 ' 일 필요하면 \' 으로 표기
            3) 큰따옴표 3개
                => \n 으로 일일히 엔터를 넣기 불편해서 사용
            4) 작은따옴표 3개

            - 문자열 연산
                + : 연결의 의미
                * : 반복의 의미
                    => 자바의 ========== 표현을 = * 20 같이 간단하게 표현 가능

            - 문자열 인덱싱과 슬라이싱 (★★★★★)

                * 인덱스
                    => 0을 붙이면 왼쪽부터 시작
                    => -1을 붙이면 오른쪽부터 접근

                * 슬라이싱
                    => [시작위치:종료위치]
                    => 종료위치는 출력에 포함하지 않음
                    => 위치를 지정하지 않으면 무조건 처음 or 마지막 의미

            - 문자열 포매팅
                1) %s : 문자열, (모든 것 가능)
                2) %c : 문자 1개
                3) %d : 정수
                4) %f : 부동 소수
                5) %% : 문자 %를 의미

                - 대입법
                    1. 자리 먼저 잡아두기
                    2. 대입 
                        ex) print("I eat %d apples" % 3)
                            => %d 자리에 3 들어감
                    * 여러개 대입 : () 로 묶기
                
                * %10s : 10 칸중에 오른쪽 정렬
                  %-10s : 10 칸중에 왼쪽 정렬

                - format 함수 사용한 포매팅
                    문자열 내부 : {0} => 순서대로 위치 잡기
                    사용 : .format(순서에 맞는 값 대입)

                - f 문자열 포매팅
                    ex) name = '홍길동'
                    age = 30
                    print(f"나의 이름은 {name} 입니다. 나이는 {age} 입니다.")
                        => 앞쪽에 f 붙이면 됨
                        => {} 안에서의 연산도 가능

                - 문자열 관련 함수
                    1) count() : 특정 문자열 개수
                    2) len() : 길이
                    3) find(찾을문자, 시작위치(옵션)) : 해당 문자가 처음 나온 위치 반환
                        => 없으면 -1 == java 의 indexOf 랑 같음
                            rfind() : 오른쪽부터 찾아서 위치 반환
                    4) index() : 해당 문자가 처음 나온 위치 반환
                        => but. find 와 달리 없으면 에러를 냄
                    5) startswith() : 특정문자로 시작하는
                    6) endswith() : 특정 문자로 끝나는
                    7) join() : 리스트를 일반 문자열로 변경시 가장많이 사용
                        => 프린트시 엔터 삽입으로 하나씩 나오게 가능
                            ex) print("\n".join(리스트))
                    8) upper() : 대문자 변환
                       lower() : 소문자 변환
                    9) swapcase() : 대/소문자 상호 변환
                    10) strip : 양쪽 공백 제거
                        lstrip() : 왼쪽 공백 제거
                        rstrip() : 오른쪽 공백 제거
                    11) replace() : 문자열 변경
                    12) split() : 문자열 나누기
                        => default : 공백 기준으로 나눠서 리스트 반환
                            기준 주기
                                ex ) print(a.split(":")) => : 을 기준으로 준 것
                    13 ) 문자열 구성 파악
                        => true / false 반환
                        isdigit()
                        isalpha()
                        isalnum() => 알파벳 + number
                        islower()
                        isupper()
                        isspace()

                    - 입력
                        input() => 스트링 값

    < List >
        참고 : basic/list
        => java/javascript 의 배열과 동일 개념
        => javascript 의 배열과 동작방식 동일함 (데이터를 여러 타입을 담을 수 있음)

        - 리스트 인덱싱과 슬라이싱
            => 문자열과 동일 개념

        - 리스트 연산
            + : 연결의 의미
            * : 반복의 의미
        
        - 수정
            list2[1:2] = [10, 11, 12]
                => 범위를 정해주면 해당 부분부터 추가가 됨

            list2[1] = [15, 16, 17]
                => 일반적인 1번 자리에 넣으면 2차원 배열의 개념으로 들어감

        - 삭제
            del list명[인덱스] : 해당 인덱스 위치의 배열값 삭제

        - 리스트 관련 함수
            1) append(요소 1개만) : 리스트 뒤에 함수 추가
                => 오직 1개의 요소만 넣을 수 있음, 여러개 X
            2) range(시작숫자, 종료숫자(포함X), 증감) : 범위 잡기
            3) sort() : 리스트 정렬
                => default : 알파벳 기준 오름차순
                    => sort(reverse=True) : 내림차순
                => 타입이 섞여있으면 정렬 못 해줌
                => 대문자 => 소문자 순서
                => 리스트 원본 자체를 정렬 시킴
            4) reverse() : 리스트 순서 거꾸로 뒤집기

    < for >
        참고 : basic/list

        - 기본
            for i in 리스트명:
                값 추출
            => 값 추출 앞의 tab 은 알아서 들어감 필수로 있어야 함

    < while >
        참고 : basic/loop

        - 기본 사용
            i = 1
            while i < 11:
                i = i + 1
                => i 의 범위를 정해주면 됨

    < 함수 >
        1) range() : 범위 표현
            range(시작숫자, 범위, 증감)
                => (시작숫자, -1, -1) = 거꾸로 출력
        2) sum() : 합 구해줌
        3) enumerate()
            => 리스트, 문자열, set, tuple, dictionary 에서 사용

    < tuple >
        참고 : basic/tuple
        => 리스트와 유사
        => () 로 감싼다
        => 튜플은 요소값 변경 불가
            => 삭제도 안된다는 뜻 => del 불가능
        => 읽기만 가능
        => 튜플의 요소값들이 두개면 ㄴ상관 but. 1개이면 무조건 ,(콤마) 있어야 함
        => 인덱싱 & 슬라이싱 개념은 있음
        => + , * 는 가능
            => 연결, 반복은 가능
        
        => 조회의 개념으로 밖에 사용하지 않음
            => tuple 은 함수의 리턴타입으로 쓰는 편 => 조회용

    < dictionary >
        참고 : basic/dict
        => 자바의 map 과 같은 개념
            => {key:value} 형태
            => key 값의 중복은 일어나지 않음

        * key 는 문자가 아니어도 상관없음
        * value 는 어떤걸 넣어도 무방함

        - 조회
            해당 key 값을 넣으면 value 값 조회 가능

        - 추가
            있는딕셔너리명["key 값"] = value 값
                => key = value 형태로 추가 됨
        
        - 삭제
            del 사용
                => del 기존딕셔너리명["key값"]
                    => 해당 딕셔너리의 key값 삭제
        
        - get()
            => 해당 key값이 없을때 get을 사용하면 none 리턴
                ex) dict1 = {'name': 'Kim'}
                    print(dict1.get("age")) => None

        keys() : key 값 가져오기
        values() : value 값 가져오기
        items() : key, value 값 가져오기

    < Set >
        참고 : basic/set
        => 집합자료형
        => 자바 set 같은 개념
        => 중복허용X
        => 순서가 없음 (랜덤으로 담음)
        
        - 에러
            1) set expected at most 1 argument, got 5
                => 한개를 기대했는데 5개가 들어왔다 (묶으라는 것임)
            2) key error
                => 이미 제거했거나 없는데 찾거나 제거하라고 해서
        
        - 인덱싱 & 슬라이싱
            => 인덱싱과 슬라이싱이 안됨 (인덱스 부여가 안됨)

            - but. 접근을 하고 싶으면
                set 구조에서 다른 구조로 넘어가서 뽑으면 됨

        - 함수
            1) intersection() : 교집합
                => & 도 가능
            2) difference() : 차집합
                => - 도 가능
            3) union() : 합집합
                => | 도 가능
            4) add() : 1 개의 값만 추가
            5) update() : 값 여러개 추가
            6) remove() : 제거

    < 함수 >
        참고 : basic/func
        => 자바랑 비슷함
        
        - 기본 구조
            def 함수명(매개변수):
            수행할문장1
            수행할문장2

        - 기본 매개변수
            def 함수명(a, b=2):
                => b 값을 안 넣어주면 b=2 고정

        - 가변 매개변수
            => 가변 매개변수는 1개만 사용
            
            - 구조
                def 함수명(*args):
                    return값
                    => args 는 그냥 많이 쓰는 이름
                    => * 이 중요함
                
                - 피해야 할 구조
                    def 함수명(*args, n)
                        => TypeError 일어남
                        => 가변 매개변수 뒤에는 일반 매개변수가 올 수 없음
                            => 가변 매개변수는 마지막에 선언

        - 키워드 매개변수
            => 매개변수를 dictionary 형태로 처리
            => **kwargs 는 *args 뒤로 감

            - 기본 구조
                def args_func1(**kwargs):
                    return값

        - 다중 리턴
            => 원래 java, js 전부 return 값은 1개만
            => python 도 1개지만 다중으로 return 하는 것처럼 보이게 함
            
            - 예제
                def func(a, b):
                    return a + b, a *b
                
                print(func(5, 6))
                    => (11, 30)
                
                => 여기서 보면 알 수 있듯이 다중리턴처럼 보이긴 하지만 tuple 로 리턴 (리턴값은 1개)
                    => default : tuple
                    => 리스트로 리턴 하는 법도 있음
                        return [] => 묶으면 리스트로 리턴함

        - 람다 함수
            => 익명 함수

            - 기본 구조
                함수명 = lambda 매개변수:return값
        
            - filter
                - 기본 구조
                    filter(함수, 함수적용할 리스트)
                        => 함수 부분에 lambda 적용가능
            
            - map
                - 기본 구조
                    map(함수, 리스트)
                        => 함수 부분에 lambda 적용가능

    < 파일 입/출력 >
        참고 : basic/inout

        * 키보드 입력 : input() / 화면 출력 : print()

        - 기본 구조
            open("경로", "모드", encoding="utf-8")
                => encoding : 선택 = 한글을 입력할 경우
                => 모드
                    w : 새로 만들어서 쓰기
                    a (append) : 추가로 쓰기
            write("내용")
                => writelines() : 한꺼번에 작성은 가능 but. 엔터 X
            close() : 열었으면 닫아야 함

            - close 안하는 법
                with open("경로", "모드") as 이름:
                    이름.write("내용")


        - 읽는법
            모드만 r 로 바꿔줌
            => open, close 방식은 똑같음
            f = open("data/test1.txt", "r", encoding="utf-8")
            content = f.read()
                => read() : 한줄씩 읽어옴
                   readline() : 줄 단위로 읽어옴 + 엔터 포함
                   readlines() : 리스트로 읽어옴
            print(content)


        - csv 파일 읽기

            import csv 하기
            
            읽어올 파일 csv.reader() 안에 넣어서 가져오기
            * 딕셔너리 기준으로 받아오기
                => csv.DictReader()

        - csv 파일 쓰기

            똑같이 import csv 하기

            쓸 내용을 csv.writer() 안에 넣어서 쓰기
                => 여러줄 한번에 넣기 = writerows(리스트)
            
            * newline="" : 엔터를 제외하고 저장

        - json
        
            - loads : 문자열을 dict 구조로 처리
            - dumps : dict 구조를 문자열로 처리
            - load : json 파일을 읽어서 dict 구조로 처리
            - dump : dict 구조를 json 으로 처리

    < 클래스 >
        참고 : basic/class

        함수에 self 가 없으면 class 메서드로 인식

        - 생성자
            __init__(self):
                => 기본 생성자
                => if 초기값 설정은 self, 값, 값... 으로 받아오면 됨
                => self.값 = 값 형식

        - 함수

        - 상속
            => java 와 개념 동일
            => 부모꺼 실행함 -> 물려받은 메서드도 실행 가능
            => java 와 동일하게 오버라이딩도 동일한 개념

        - private
            이름 앞에 __ 붙임
                => 직접 접근 X 가 됨

    < 모듈 / 패키지 >
        참고 : basic/module
        
        * 모듈 : 함수, 클래스를 모아놓은 파일
        * 패키지 : 관련있는 모듈의 집합

        * import 모듈명 : 전체 모듈을 load(끌어오기)
            => but. 부분하는 것도 가능
                from 모듈명 import 함수명, 클래스명... : 사용할 함수, 클래스만 가져오기
                    => 이러면 모듈명. 의 필요가 없어지고 바로 함수명 클래스명으로 작성 가능
                    => 전체 불러오기는 import * 로 가능


        - math()

            1) ceil()
            2) floor()
            3) sin()

        - random
            => java 의 math.random 과 같은 개념
            => 0.0 <= x < 1.0

            1) uniform
                => uniform(x,y) : x ~ y 사이의 임의의 float 값 리턴
            2) randrange
                => randrange(max) : 0 ~ max 사이의 int 값 리턴
                => randrange(min, max) : min ~ max 사이의 int 값 리턴
            3) choice
                => choice(리스트) : 리스트에서 임의의 하나
            4) shuffle
                => shuffle(리스트) : 리스트 내부의 요소들을 랜덤하게 섞기
            5) sample
                => sample(리스트, k=값) : 리스트 요소 중에서 k개 뽑기

        - time

            1) sleep
                => sleep(값) : 해당하는 값 만큼 해당 줄에서 정지 -> 이후 값 지나면 뒤에 코드 실행
            2) time()
                => 1970-01-01 기준으로 지난 시간 초단위로 리턴

        - datetime

        < 모듈 만들기 >
            참고 : basic/mod1
            => .py 로 작성
                => 확장자 py 인 것은 모두 모듈

            - 사용법
                import 모듈명(직접 만든)
                => 이후 사용은 일반 모듈과 동일
            
            - 테스트
                => 모듈 생성시 테스트 구문으로 테스트함
                => but. 테스트 코드가 외부에서도 동작 할 수 있음
                    => 해결책
                        if __name__ == "__main__"
                            테스트 코드
                        => .py 를 제외하면 테스트 코드 작동 안함